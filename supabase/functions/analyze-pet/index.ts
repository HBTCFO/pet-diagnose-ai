import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Starting pet analysis request');
    
    const { files, petInfo, panicMode } = await req.json();
    
    if (!files || files.length === 0) {
      throw new Error('No files provided for analysis');
    }

    console.log('Pet info:', petInfo);
    console.log('Files count:', files.length);
    console.log('Panic mode:', panicMode);

    // Prepare the message content
    const messageContent = [];
    
    // Add text prompt
    const prompt = `–¢—ã –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Å–ª—É—á–∞–π —Å –ø–∏—Ç–æ–º—Ü–µ–º:

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ:
- –í–∏–¥: ${petInfo.species || '–ù–µ —É–∫–∞–∑–∞–Ω'}
- –í–æ–∑—Ä–∞—Å—Ç: ${petInfo.age || '–ù–µ —É–∫–∞–∑–∞–Ω'}  
- –°–∏–º–ø—Ç–æ–º—ã: ${petInfo.symptoms || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

${panicMode ? 'üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –°–õ–£–ß–ê–ô - –ü–ê–ù–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú üö®\n–î–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –ø–æ–º–æ—â–∏.' : ''}

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

    messageContent.push({
      type: 'text',
      text: prompt
    });

    // Add images directly as base64
    for (const file of files) {
      if (file.type.startsWith('image/')) {
        messageContent.push({
          type: 'image_url',
          image_url: {
            url: file.data
          }
        });
      }
    }

    console.log('Calling OpenAI Chat Completions API...');
    
    // Call OpenAI Chat Completions API directly
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: messageContent
          }
        ],
        max_tokens: 2000,
        temperature: 0.3,
      }),
    });

    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${result.error?.message || 'Unknown error'}`);
    }

    const analysis = result.choices[0].message.content;
    console.log('Analysis completed successfully');

    return new Response(JSON.stringify({ 
      success: true,
      analysis,
      panicMode 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in analyze-pet function:', error);
    return new Response(JSON.stringify({ 
      success: false,
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});